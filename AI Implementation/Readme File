üåü Artificial Intelligence Algorithms Overview
This document provides a summarized overview of various AI algorithms covered in this course. It includes a brief explanation of how each algorithm works, where they are applied in real life, and their computational complexity.

üîç Uninformed Search Techniques
1. Breadth-First Search (BFS)
How it works:
Explores nodes level by level using a First-In-First-Out (FIFO) queue.
Applications:
Used in shortest path problems, web crawling, and friend suggestion systems.
Complexity:

Time: O(b^d)

Space: O(b^d)
Where b = branching factor, d = depth of the goal.

2. Depth-First Search (DFS)
How it works:
Dives deep into each path before backtracking; uses stack or recursion.
Applications:
Solving puzzles, traversing mazes, and exploring file systems.
Complexity:

Time: O(b^m)

Space: O(b*m)
m = maximum depth.

3. Iterative Deepening Search (IDS)
How it works:
Performs DFS with a gradually increasing depth limit; combines advantages of BFS and DFS.
Applications:
Used in game trees and deep search problems with memory limits.
Complexity:

Time: O(b^d)

Space: O(b*d)

4. Bidirectional Search
How it works:
Starts BFS from both the initial and goal node and meets in the middle.
Applications:
Useful in navigation systems, robotics, and GPS route planning.
Complexity:

Time: O(b^(d/2))

Space: O(b^(d/2))

5. Depth-Limited Search
How it works:
A modified DFS that only explores paths up to a fixed depth.
Applications:
Best for problems where the goal depth is known beforehand.
Complexity:

Time: O(b^l)

Space: O(b*l)
l = depth limit.

üß† Informed (Heuristic-Based) Search
6. Heuristic Search
How it works:
Guides the search using a heuristic function that estimates the cost to the goal.
Applications:
Widely used in robotics, planning, and AI assistants.
Complexity:
Depends on the heuristic; generally faster than uninformed search.

7. Best-First Search
How it works:
Expands the most promising node based on lowest heuristic value (h(n)).
Applications:
Used in pathfinding, AI planning, and puzzle solving.
Complexity:

Time: O(b^m)

Space: O(b^m)

8. A* (A-Star) Search
How it works:
Uses f(n) = g(n) + h(n) combining actual and estimated costs for optimal path.
Applications:
Employed in Google Maps, games, and robot pathfinding.
Complexity:

Time: O(b^d)

Space: O(b^d)
(depends on quality of heuristic)

9. AO* Algorithm
How it works:
Works on AND-OR graphs; selects the best partial solution path and refines it.
Applications:
Used in expert systems, problem solvers, and decision diagnostics.
Complexity:
Varies based on structure and branching.

‚öôÔ∏è Optimization and Local Search
10. Hill Climbing
How it works:
Starts with a solution and continuously moves to a better neighbor until no improvement is possible.
Applications:
Used in parameter tuning, N-Queens, and scheduling.
Complexity:

Time: O(n) to O(n^2)

Space: O(1)

11. Beam Search
How it works:
Keeps only the top k best nodes at each level to reduce memory usage.
Applications:
Found in speech recognition, machine translation, and natural language processing.
Complexity:

Time: O(k * b * d)

Space: O(k * d)

üéÆ Game-Playing Strategies
12. Minimax Algorithm
How it works:
A decision rule for two-player games where one maximizes score while the other minimizes it.
Applications:
Used in tic-tac-toe, chess, checkers, and other turn-based games.
Complexity:

Time: O(b^m)

Space: O(m)
m = max depth

13. Alpha-Beta Pruning
How it works:
Enhancement of Minimax that prunes branches which won‚Äôt affect the final decision.
Applications:
Highly used in chess engines and AI for complex games.
Complexity:

Time: O(b^(m/2)) (with good move ordering)

Space: O(m)

